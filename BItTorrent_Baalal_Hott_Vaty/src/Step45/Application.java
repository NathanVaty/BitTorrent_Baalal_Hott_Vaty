/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Step45;

import Step4.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Nathan Vaty
 */
public class Application extends javax.swing.JFrame {

    /* Variables */
    Socket ssm; 
    
    PrintStream pms;
    BufferedReader buff;
    
    boolean possedeFich;
    
    List<String> listeIp;
    List<Integer> listePortsF;
    List<Integer> listePortsB;
    List<String> listeBlocsDispo;
    
    /**
     * Creates new form Application1
     */
    public Application() {
        initComponents();
        initWindowListener();
        setComboBox(false);
        listeIp = new ArrayList<>();
        listePortsF = new ArrayList<>();
        listePortsB = new ArrayList<>();
        listeBlocsDispo = new ArrayList<>();
        
    }
    public void setComboBox(boolean ft){
        lbl_partie_fich.setVisible(ft);
        cb_tout.setVisible(ft);
        cb_bloc1.setVisible(ft);
        cb_bloc2.setVisible(ft);
        cb_bloc3.setVisible(ft);
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filec_fichier = new javax.swing.JFileChooser();
        option_servcli = new javax.swing.JOptionPane();
        option_complet = new javax.swing.JOptionPane();
        lbl_possedezvous = new javax.swing.JLabel();
        btn_Oui = new javax.swing.JButton();
        btn_non = new javax.swing.JButton();
        lbl_nomfich = new javax.swing.JLabel();
        btn_valider = new javax.swing.JButton();
        btn_annuler = new javax.swing.JButton();
        txt_ipserv = new javax.swing.JTextField();
        lbl_ipserv = new javax.swing.JLabel();
        lbl_possedefich = new javax.swing.JLabel();
        cb_tout = new javax.swing.JCheckBox();
        cb_bloc1 = new javax.swing.JCheckBox();
        cb_bloc2 = new javax.swing.JCheckBox();
        cb_bloc3 = new javax.swing.JCheckBox();
        lbl_partie_fich = new javax.swing.JLabel();
        btn_stop = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Application");
        setAlwaysOnTop(true);

        lbl_possedezvous.setText("Possédez-vous le fichier ou au moins une partie ?");

        btn_Oui.setText("Oui");
        btn_Oui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_OuiActionPerformed(evt);
            }
        });

        btn_non.setText("Non");
        btn_non.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nonActionPerformed(evt);
            }
        });

        lbl_nomfich.setToolTipText("");

        btn_valider.setText("Valider");
        btn_valider.setEnabled(false);
        btn_valider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_validerActionPerformed(evt);
            }
        });

        btn_annuler.setText("Annuler");
        btn_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_annulerActionPerformed(evt);
            }
        });

        txt_ipserv.setToolTipText("");

        lbl_ipserv.setText("Entrez le nom ou l'ip du serveur Main");

        cb_tout.setText("Tout");
        cb_tout.setToolTipText("");
        cb_tout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_toutActionPerformed(evt);
            }
        });

        cb_bloc1.setText("Bloc 1");
        cb_bloc1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_bloc1ActionPerformed(evt);
            }
        });

        cb_bloc2.setText("Bloc 2");
        cb_bloc2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_bloc2ActionPerformed(evt);
            }
        });

        cb_bloc3.setText("Bloc 3");
        cb_bloc3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_bloc3ActionPerformed(evt);
            }
        });

        lbl_partie_fich.setText("Quelle(s) partie(s) du fichier possédez-vous?");

        btn_stop.setText("Stop");

        jLabel1.setText("Cliquez pour stopper le mode serveur");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_stop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_annuler)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_valider)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lbl_nomfich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(22, 22, 22)
                                            .addComponent(btn_Oui)
                                            .addGap(18, 18, 18)
                                            .addComponent(btn_non)
                                            .addGap(40, 40, 40)
                                            .addComponent(lbl_possedefich))
                                        .addComponent(lbl_ipserv)
                                        .addComponent(txt_ipserv, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(cb_tout)
                                                    .addGap(9, 9, 9))
                                                .addComponent(cb_bloc1, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addGap(23, 23, 23)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(cb_bloc2)
                                                .addComponent(cb_bloc3)))
                                        .addComponent(lbl_partie_fich))
                                    .addGap(4, 4, 4)))
                            .addComponent(lbl_possedezvous))
                        .addContainerGap(150, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lbl_possedezvous)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Oui)
                    .addComponent(btn_non)
                    .addComponent(lbl_possedefich))
                .addGap(33, 33, 33)
                .addComponent(lbl_nomfich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_partie_fich, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_tout)
                    .addComponent(cb_bloc2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_bloc1)
                    .addComponent(cb_bloc3))
                .addGap(47, 47, 47)
                .addComponent(lbl_ipserv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_ipserv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_valider)
                    .addComponent(btn_annuler)
                    .addComponent(btn_stop))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initWindowListener(){
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                try {
                    pms.println("fin connexion");
                    System.exit(0);
                }catch (Exception ex){
                    System.exit(0);
                }
            }
        });
    }
    private void btn_OuiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_OuiActionPerformed
        filec_fichier.setVisible(true);
        filec_fichier.showOpenDialog(this);
        lbl_nomfich.setText(filec_fichier.getSelectedFile().getName());
        setComboBox(true);
        lbl_possedefich.setText("Vous possédez le fichier");
        possedeFich = true;
        
    }//GEN-LAST:event_btn_OuiActionPerformed

    private void btn_nonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nonActionPerformed
        // Si on possède pas le fichier on devient client et on cherche
        // à reconstituer le ficher
        //
        btn_valider.setEnabled(true);
        lbl_possedefich.setText("Vous possédez pas le fichier");
        possedeFich = false;
        //
        
    }//GEN-LAST:event_btn_nonActionPerformed

    private void btn_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_annulerActionPerformed
        lbl_nomfich.setText("");
        lbl_possedefich.setText("");
        txt_ipserv.setText("");
        setComboBox(false);
    }//GEN-LAST:event_btn_annulerActionPerformed

    /**
     * Méthode pour récupérer la liste des ip et ports  d'appli dispo en fonction
     * de notre recherche de blocs
     * @param buff
     * @throws IOException 
     */
    private void recupListesIpPorts() throws IOException {
        listeIp.clear();
        listePortsF.clear();
        listePortsB.clear();
        String ch="";
        System.out.println("recupListe");
        while(!ch.equals("fin")) {
            ch = buff.readLine();
            System.out.println(ch);
            if (!ch.equals("fin")) {
                listeIp.add(ch);
            }
        }
        ch="";
        while(!ch.equals("fin")) {
            ch = buff.readLine();
            System.out.println(ch);
            if (!ch.equals("fin")) {
                listePortsF.add(Integer.parseInt(ch.substring(0,5)));
                listePortsB.add(Integer.parseInt(ch.substring(6,11)));
            }
        }
        ch="";
        while(!ch.equals("fin")) {
            ch = buff.readLine();
            System.out.println(ch);
            if (!ch.equals("fin")) {
                listeBlocsDispo.add(ch);
            }
        }
    }
    private void btn_validerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_validerActionPerformed
        try {
            ssm = new Socket(txt_ipserv.getText(),41000);
            pms = new PrintStream(ssm.getOutputStream());
            buff = new BufferedReader(new InputStreamReader(ssm.getInputStream()));
          
        } catch (IOException ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Client cli = new Client(ssm);
      
        try {
            if (!possedeFich) {
                boolean finRecup;
                option_servcli.showMessageDialog(null, "Vous devenez client "
                        + "et recevrez des blocs de donnees","Information", JOptionPane.INFORMATION_MESSAGE);
                finRecup = cli.recupererFichier();
                while(!finRecup){}
                 option_complet.showMessageDialog(null, "Fichier Reconstitue dans le dossier "
                        + "C:\\BitTorrentStep4, Vous devenez serveur qui envoie des blocs de données",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
               // cli.toServeur();
               
                
            } else {
                option_servcli.showMessageDialog(null, "Vous devenez serveur "
                        + "et envoyez des blocs de donnees","Information", JOptionPane.INFORMATION_MESSAGE);

                pms.println("getNum");
                
                String chaine ="";
                chaine = buff.readLine();
                System.out.println("on a le num");
                 /// On possède le fichier, on initalise le serveur
                ServerSocket ssg = new ServerSocket(40000+Integer.parseInt(chaine));
                ServerSocket ssB = new ServerSocket(39000+Integer.parseInt(chaine));
                System.out.println((40000+Integer.parseInt(chaine)));
                //pms.println("possede");
                
                boolean blocs[];
                blocs = getNbBlocs();
                int totB=0;
                if(blocs[0] && blocs [1] && blocs[2]){
                    totB = 7;
                } else {
                    if (blocs[0]) {
                        totB++;
                    }
                    if (blocs[1]) {
                        totB+=2;
                    }
                    if (blocs[2]) {
                       totB+=4; 
                    }
                }
              
                System.out.println("avant switch");
                switch(totB){
                    case 1: pms.println("bloc 1");
                    recupListesIpPorts();
                    break;
                    case 2: pms.println("bloc 2");
                    recupListesIpPorts();
                    break;
                    case 3: pms.println("bloc 1 & 2");
                    recupListesIpPorts();
                    break;
                    case 4: pms.println("bloc 3");
                    recupListesIpPorts();
                    break;
                    case 5: pms.println("bloc 1 & 3");
                    recupListesIpPorts();
                    break;
                    case 6: pms.println("bloc 2 & 3");
                    recupListesIpPorts();
                    break;
                    case 7: pms.println("Tout");
                    break;
                    
                }
                System.out.println("apres switch");
                  Socket sss;
                  Socket sssB;
                // On crée un thread pour chaque applications qui se connecteront à ce serveur
                while (true) {
                    sss=null;
                    /**
                     * en attendant qu'on se connecte à lui il tente de récupérer
                     * les parties manquantes s'il y en a
                     */
                    if (!blocs[0] || !blocs[1] || !blocs[2]) {
                        blocs=cli.recupBlocs(blocs,listeIp,listePortsF,listePortsB,listeBlocsDispo,
                                filec_fichier.getSelectedFile().toString(),
                                filec_fichier.getSelectedFile().getName());
                        List<String> tempoBloc = listeBlocsDispo;
                        recupListesIpPorts();
//                        if (!tempoBloc.equals(listeBlocsDispo)){
//                            blocs=cli.recupBlocs(blocs,listeIp,listePortsF,listePortsB,listeBlocsDispo,
//                                filec_fichier.getSelectedFile().toString(),
//                                filec_fichier.getSelectedFile().getName());
//                        }
                        //recupListesIpPorts();
                    }
                    //while((sss != ssg.accept())){sss = ssg.accept();}
                    sss = ssg.accept();
                    sssB = ssB.accept();
                    Thread t = new Thread(new ServeurThread(sss,sssB, filec_fichier.getSelectedFile().toString(),
                            filec_fichier.getSelectedFile().getName(),blocs));
                    t.start();
                
                    
                    
                    
                }
            }
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_btn_validerActionPerformed

    private boolean[] getNbBlocs(){
        boolean blocs[] = new boolean[3];
        if (cb_tout.isSelected()) {
            blocs[0] = true;
            blocs[1] = true;
            blocs[2] = true;
        } else {
            blocs[0]=cb_bloc1.isSelected();
            blocs[1]=cb_bloc2.isSelected();
            blocs[2]=cb_bloc3.isSelected();
        }
        
        return blocs;
    }
    
    private void cb_toutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_toutActionPerformed
        if(cb_tout.isSelected() || cb_bloc1.isSelected() || cb_bloc2.isSelected()
                || cb_bloc3.isSelected()) {
            btn_valider.setEnabled(true);
        } else {
            btn_valider.setEnabled(false);
        }
    }//GEN-LAST:event_cb_toutActionPerformed

    private void cb_bloc1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_bloc1ActionPerformed
         if(cb_tout.isSelected() || cb_bloc1.isSelected() || cb_bloc2.isSelected()
                || cb_bloc3.isSelected()) {
            btn_valider.setEnabled(true);
        } else {
            btn_valider.setEnabled(false);
        }
    }//GEN-LAST:event_cb_bloc1ActionPerformed

    private void cb_bloc2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_bloc2ActionPerformed
         if(cb_tout.isSelected() || cb_bloc1.isSelected() || cb_bloc2.isSelected()
                || cb_bloc3.isSelected()) {
            btn_valider.setEnabled(true);
        } else {
            btn_valider.setEnabled(false);
        }
    }//GEN-LAST:event_cb_bloc2ActionPerformed

    private void cb_bloc3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_bloc3ActionPerformed
         if(cb_tout.isSelected() || cb_bloc1.isSelected() || cb_bloc2.isSelected()
                || cb_bloc3.isSelected()) {
            btn_valider.setEnabled(true);
        } else {
            btn_valider.setEnabled(false);
        }
    }//GEN-LAST:event_cb_bloc3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Oui;
    private javax.swing.JButton btn_annuler;
    private javax.swing.JButton btn_non;
    private javax.swing.JButton btn_stop;
    private javax.swing.JButton btn_valider;
    private javax.swing.JCheckBox cb_bloc1;
    private javax.swing.JCheckBox cb_bloc2;
    private javax.swing.JCheckBox cb_bloc3;
    private javax.swing.JCheckBox cb_tout;
    private javax.swing.JFileChooser filec_fichier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbl_ipserv;
    private javax.swing.JLabel lbl_nomfich;
    private javax.swing.JLabel lbl_partie_fich;
    private javax.swing.JLabel lbl_possedefich;
    private javax.swing.JLabel lbl_possedezvous;
    private javax.swing.JOptionPane option_complet;
    private javax.swing.JOptionPane option_servcli;
    private javax.swing.JTextField txt_ipserv;
    // End of variables declaration//GEN-END:variables
}

